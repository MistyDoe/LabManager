// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(LabManagerDBContext))]
    [Migration("20230829150353_allTables")]
    partial class allTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("API.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IngredientsForMediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IngredientsForMediaId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("API.Models.IngredientsForMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Quantity")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("IngredientsForMedia");
                });

            modelBuilder.Entity("API.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProtocolId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.HasIndex("StageId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("API.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForSale")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InTS")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("InTSQt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoredQt")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("API.Models.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Protocol");
                });

            modelBuilder.Entity("API.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Stagetype")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("PlantProtocol", b =>
                {
                    b.Property<int>("PlantsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProtocolsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlantsId", "ProtocolsId");

                    b.HasIndex("ProtocolsId");

                    b.ToTable("PlantProtocol");
                });

            modelBuilder.Entity("API.Models.Ingredient", b =>
                {
                    b.HasOne("API.Models.IngredientsForMedia", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientsForMediaId");
                });

            modelBuilder.Entity("API.Models.IngredientsForMedia", b =>
                {
                    b.HasOne("API.Models.Media", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("MediaId");
                });

            modelBuilder.Entity("API.Models.Media", b =>
                {
                    b.HasOne("API.Models.Protocol", null)
                        .WithMany("Media")
                        .HasForeignKey("ProtocolId");

                    b.HasOne("API.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("PlantProtocol", b =>
                {
                    b.HasOne("API.Models.Plant", null)
                        .WithMany()
                        .HasForeignKey("PlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Protocol", null)
                        .WithMany()
                        .HasForeignKey("ProtocolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.IngredientsForMedia", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("API.Models.Media", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("API.Models.Protocol", b =>
                {
                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
